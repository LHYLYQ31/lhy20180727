<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">
	<!-- 采用注释的方式配置bean -->
	
	<context:property-placeholder location="classpath:jdbc/jdbc.properties"/>
		<!-- 配置要扫描的包 -->
	<context:component-scan base-package="com.sinosoft" />
   	<!-- 手动获取Bean -->
	<!-- <bean class="com.sinosoft.sinoep.util.SpringBeanUtils" /> -->
	 <!-- 基于Druid数据库链接池的数据源配置 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性driverClassName、 url、user、password -->
		<property name="driverClassName" value="${jdbc.driver}" />
		                            
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<!-- 通常来说，只需要修改initialSize、minIdle、maxActive -->
		<property name="initialSize" value="2" />
		<property name="minIdle" value="2" />
		<property name="maxActive" value="30" />
		<property name="testWhileIdle" value="false" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="5000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="30000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 解密密码必须要配置的项 -->
		<!--  
		<property name="filters" value="config" />
		<property name="connectionProperties" value="config.decrypt=true" />
		-->
	</bean>
    
    
    <bean id="hibernateTemplate" class="org.springframework.orm.hibernate4.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
    
     <!--配置sessionfactory  -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
        <property name="hibernateProperties">
            <props>
            <!--  oracle方言-->
                <!-- <prop key="hibernate.dialect">org.hibernate.dialect.OracleDialect</prop> -->
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLInnoDBDialect</prop>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.format_sql">false</prop>
                <prop key="hibernate.jdbc.fetch_size">50</prop>  
                <prop key="hibernate.jdbc.batch_size">25</prop>
                <prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>
                 <prop key="hibernate.hbm2ddl.auto">update</prop> 
            </props>
        </property>
        <property name="packagesToScan" value="com.sinosoft.**.model"/>
	</bean>
	<!-- 配置Hibernate事务管理器 -->
    <bean id="transactionManager"
        class="org.springframework.orm.hibernate4.HibernateTransactionManager">
      <property name="sessionFactory" ref="sessionFactory" />
    </bean>
    
     <!-- Spring AOP config 
		  (* com.evan.crm.service.*.*(..))中几个通配符的含义：
		  第一个 * —— 通配 任意返回值类型
		  第二个 * —— 通配 任意模块下的service  cn.com.sinosoft.nfwjs.settlement.XXX.service
		  第三个 * —— 通配 包cn.com.sinosoft.nfwjs.settlement.XXX.service 下的任意class
		  第四个 * —— 通配 包cn.com.sinosoft.nfwjs.settlement.XXX.service下的任意class的任意方法
		  第五个 .. —— 通配 方法可以有0个或多个参数
		   -->
     <aop:config>
		<aop:pointcut id="businessService"
			expression="(execution(* com.sinosoft.*.*.service.*.*(..))) or (execution(* com.sinosoft.*.*.*.service.*.*(..))) " />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="businessService" />
	</aop:config>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- the transactional semantics... -->
		<tx:attributes>
			<!-- all methods starting with '*' are read-only -->
			<tx:method name="*" propagation="SUPPORTS" read-only="true" />
			<!-- other methods use the default transaction settings (see below) -->
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="set*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	 <!-- 读入配置属性文件 -->
	<context:annotation-config />
	<!-- 导入redis的配置文件 -->
 	<!--<import resource="classpath:spring/spring-redis.xml" />-->
 	<import resource="classpath:spring/spring-task.xml" />
</beans>